<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="description" content="Lode Runner" />
		<title>Lode Runner par Marc-Olivier Lalonde</title>
		<link rel="stylesheet" type="text/css" href="StyleLabo5.css" />
		<link rel="javascript" href="echelle.js" />

		<!-- Code JavaScript local -->
		<script type="text/javascript">
			let objCanvas = null
			let objC2D = null
			let objCycleAnimation = null
			let intHauteurCellule = null
			let intLongueurCellule = null

			let objBrique = null
			let objEchelle = null
			let objTextureBois = null
			let objBarreFranchissement = null
			let objImageOr = null
			let objOr = null

			const intVitesse = 2

			let objLodeRunner = null

			/*
							" " = case vide (espace dans les guillemets)
							"o" = or
							"b" = brique
							"e" = echelle
							"f" = barre de franchissement
							"p" = plancher gris
						*/
			// prettier-ignore
			let tTableauDeJeu = [
																	[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
																	[" "," "," "," ","o"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
																	["b","b","b","b","b","b","b","e","b","b","b","b","b","b","b"," "," "," "," "," "," "," "," "," "," "," "," "," "],
																	[" "," "," "," "," "," "," ","e","f","f","f","f","f","f","f","f","f","f"," "," "," "," "," ","o"," "," "," "," "],
																	[" "," "," "," "," "," "," ","e"," "," "," "," ","b","b","e"," "," "," ","b","b","b","b","b","b","b","e","b","b"],
																	[" "," "," "," "," "," "," ","e"," "," "," "," ","b","b","e"," "," "," "," "," "," "," "," "," "," ","e"," "," "],
																	[" "," "," "," "," "," "," ","e"," "," "," "," ","b","b","e"," "," "," "," "," "," "," ","o"," "," ","e"," "," "],
																	["b","b","e","b","b","b","b","b"," "," "," "," ","b","b","b","b","b","b","b","b","e","b","b","b","b","b","b","b"],
																	[" "," ","e"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","e"," "," "," "," "," "," "," "],
																	[" "," ","e"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","e"," "," "," "," "," "," "," "],
																	["b","b","b","b","b","b","b","b","b","e","b","b","b","b","b","b","b","b","b","b","e"," "," "," "," "," "," "," "],
																	[" "," "," "," "," "," "," "," "," ","e"," "," "," "," "," "," "," "," "," "," ","e"," "," "," "," "," "," "," "],
																	[" "," "," "," "," "," "," ","o"," ","e","f","f","f","f","f","f","f","f","f","f","e"," "," "," ","o"," "," "," "],
																	[" "," "," "," ","e","b","b","b","b","b","b"," "," "," "," "," "," "," "," "," ","b","b","b","b","b","b","b","e"],
																	[" "," "," "," ","e"," "," "," "," "," "," "," "," "," "," "," "," "," ","o"," "," "," "," "," "," "," "," ","e"],
																	["b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b","b"],
																	["p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p","p"]
																]

			const initAnimation = () => {
				objCanvas = document.getElementById("monCanvas")
				objCanvas.focus()
				objC2D = objCanvas.getContext("2d")
				intLongueurCellule = objCanvas.width / 28
				intHauteurCellule = objCanvas.height / 17
				initFond()
				initBrique()
				initEchelle()
				initBarreFranchissement()
				initOr()
				initTableauJeu()
				initObjLodeRunner()

				dessiner() // Dessiner une première fois
				animer()
			}

			const initFond = () => {
				objFond = new Object()
				objFond.strCouleur = "black"
			}

			const initBrique = () => {
				objBrique = new Object()
				objBrique.tPos = []
				objBrique.strCouleurBrique = "red"
				objBrique.strCouleurCiment = "gray"
			}

			const initEchelle = () => {
				// 50 x 40
				objEchelle = new Object()
				objEchelle.tPos = []
				objEchelle.strCouleur = "#87542D"
			}

			const initBarreFranchissement = () => {
				objBarreFranchissement = new Object()
				objBarreFranchissement.tPos = []
				objBarreFranchissement.strCouleur = "orange"
			}

			const initOr = () => {
				objImageOr = new Image()
				objImageOr.src = "Images/tresor.png"

				objOr = new Object()
				objOr.tPos = []
			}

			const initTableauJeu = () => {
				// intit chaque objet for ij loop pour push position dans chaque objetfixe.
				for (let i = 0; i < tTableauDeJeu.length; i++) {
					for (let j = 0; j < tTableauDeJeu[i].length; j++) {
						switch (tTableauDeJeu[i][j]) {
							case "b":
								objBrique.tPos.push({
									x: j * intLongueurCellule,
									y: i * intHauteurCellule,
								})
								break
							case "e":
								objEchelle.tPos.push({
									x: j * intLongueurCellule,
									y: i * intHauteurCellule,
								})
								break
							case "f":
								objBarreFranchissement.tPos.push({
									x: j * intLongueurCellule,
									y: i * intHauteurCellule,
								})
								break
							case "o":
								objOr.tPos.push({
									x: j * intLongueurCellule,
									y: i * intHauteurCellule,
								})
								break
							default:
								break
						}
					}
				}
			}

			const animer = () => {
				// Requête pour le prochain cycle
				objCycleAnimation = requestAnimationFrame(animer)

				// Le cycle d'animation
				effacerDessin()
				mettreAJourAnimation()
				dessiner()
			}

			const effacerDessin = () => {
				objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height)
			}

			const mettreAJourAnimation = () => {
				mettreAJourAnimationLoneRunner()
			}

			const arreterAnimation = () => {
				if (objCycleAnimation != null) cancelAnimationFrame(objCycleAnimation)
				objCycleAnimation = null
			}

			const dessiner = () => {
				dessinerFond()
				dessinerBrique()
				dessinerEchelle()
				dessinerBarreFranchissement()
				dessinerOr()
				dessinerLodeRunner()
			}

			const dessinerFond = () => {
				objC2D.save()
				objC2D.beginPath()
				objC2D.fillStyle = objFond.strCouleur
				objC2D.rect(0, 0, objCanvas.width, objCanvas.height)
				objC2D.fill()
				objC2D.restore()
			}

			const dessinerBrique = () => {
				objC2D.save()
				for (let index = 0; index < objBrique.tPos.length; index++) {
					let intPosXActuel = objBrique.tPos[index].x
					let intPosYActuel = objBrique.tPos[index].y

					objC2D.fillStyle = "red"
					objC2D.beginPath()
					objC2D.rect(intPosXActuel, intPosYActuel, intLongueurCellule, intHauteurCellule)
					objC2D.fill()

					objC2D.strokeStyle = "gray"
					objC2D.lineWidth = 3
					objC2D.beginPath()
					objC2D.moveTo(intPosXActuel, intPosYActuel)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel)
					objC2D.moveTo(intPosXActuel, intPosYActuel + intHauteurCellule)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + intHauteurCellule)
					objC2D.moveTo(intPosXActuel + intLongueurCellule / 3, intPosYActuel + intHauteurCellule)
					objC2D.lineTo(
						intPosXActuel + intLongueurCellule / 3,
						intPosYActuel + intHauteurCellule / 2
					)
					objC2D.moveTo(intPosXActuel + (2 * intLongueurCellule) / 3, intPosYActuel)
					objC2D.lineTo(
						intPosXActuel + (2 * intLongueurCellule) / 3,
						intPosYActuel + intHauteurCellule / 2
					)
					objC2D.stroke()

					objC2D.strokeStyle = "gray"
					objC2D.lineWidth = 5
					objC2D.beginPath()
					objC2D.moveTo(intPosXActuel, intPosYActuel + intHauteurCellule / 2)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + intHauteurCellule / 2)
					objC2D.stroke()
				}
				objC2D.restore()
			}

			const dessinerEchelle = () => {
				objC2D.save()
				for (let index = 0; index < objEchelle.tPos.length; index++) {
					let intPosXActuel = objEchelle.tPos[index].x
					let intPosYActuel = objEchelle.tPos[index].y

					objC2D.strokeStyle = objEchelle.strCouleur
					objC2D.lineWidth = 5
					objC2D.beginPath()
					// bareau de gauche
					objC2D.moveTo(intPosXActuel + 2.5, intPosYActuel - 1.5)
					objC2D.lineTo(intPosXActuel + 2.5, intPosYActuel + intHauteurCellule - 1)
					objC2D.stroke()
					// bareau de droite
					objC2D.moveTo(intPosXActuel + intLongueurCellule - 2.5, intPosYActuel - 1.5)
					objC2D.lineTo(
						intPosXActuel + intLongueurCellule - 2.5,
						intPosYActuel + intHauteurCellule - 1
					)
					objC2D.stroke()
					objC2D.lineWidth = 2
					// bareau du haut et les autres en dessous
					objC2D.moveTo(intPosXActuel, intPosYActuel + 2)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + 2)
					objC2D.moveTo(intPosXActuel, intPosYActuel + 12)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + 12)
					objC2D.moveTo(intPosXActuel, intPosYActuel + 22)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + 22)
					objC2D.moveTo(intPosXActuel, intPosYActuel + 32)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + 32)
					objC2D.stroke()
				}
				let intPosXActuel = objEchelle.tPos[0].x
				let intPosYActuel = objEchelle.tPos[0].y

				objC2D.restore()
			}

			const dessinerBarreFranchissement = () => {
				objC2D.save()
				for (let index = 0; index < objBarreFranchissement.tPos.length; index++) {
					let intPosXActuel = objBarreFranchissement.tPos[index].x
					let intPosYActuel = objBarreFranchissement.tPos[index].y

					objC2D.strokeStyle = objBarreFranchissement.strCouleur
					objC2D.lineWidth = 2
					objC2D.beginPath()
					objC2D.moveTo(intPosXActuel, intPosYActuel + 10)
					objC2D.lineTo(intPosXActuel + intLongueurCellule, intPosYActuel + 10)
					objC2D.stroke()
				}
			}

			const dessinerOr = () => {
				objC2D.save()
				for (let index = 0; index < objOr.tPos.length; index++) {
					let intPosXActuel = objOr.tPos[index].x
					let intPosYActuel = objOr.tPos[index].y

					objC2D.beginPath()
					objC2D.drawImage(
						objImageOr,
						intPosXActuel + 5,
						intPosYActuel + 15,
						intLongueurCellule - 5,
						intHauteurCellule - 15
					)
				}
				objC2D.restore()
			}

			const initObjLodeRunner = () => {
				objLodeRunner = new Object()
				objLodeRunner.intPosXActuel =
					10 * intLongueurCellule - intLongueurCellule / 2 + intLongueurCellule / 2
				objLodeRunner.intPosYActuel = 14 * intHauteurCellule + intHauteurCellule - 2
				objLodeRunner.intVitesse = intVitesse
				objLodeRunner.intScaleX = 1
				objLodeRunner.binMovDroite = false
				objLodeRunner.binMovGauche = false
			}

			const dessinerLodeRunner = () => {
				objC2D.save()
				objC2D.translate(objLodeRunner.intPosXActuel, objLodeRunner.intPosYActuel)
				objC2D.scale(objLodeRunner.intScaleX, 1)

				objC2D.strokeStyle = "white"
				// pied droit
				objC2D.beginPath()
				objC2D.lineWidth = 6
				objC2D.moveTo(3, 0)
				objC2D.lineTo(3, -7)
				objC2D.stroke()
				// jambe droite
				objC2D.beginPath()
				objC2D.lineWidth = 3
				objC2D.moveTo(1.5, -7)
				objC2D.lineTo(1.5, -11)
				objC2D.stroke()
				// corps
				objC2D.beginPath()
				objC2D.lineWidth = 7
				objC2D.moveTo(-7 / 2, -8)
				objC2D.lineTo(-7 / 2, -20)
				objC2D.stroke()
				// jambe droite
				objC2D.beginPath()
				objC2D.lineWidth = 4
				objC2D.moveTo(-4, -6)
				objC2D.lineTo(-15, -6)
				objC2D.stroke()
				// epaule droite
				objC2D.beginPath()
				objC2D.lineWidth = 3
				objC2D.moveTo(-4, -21.5)
				objC2D.lineTo(6, -21.5)
				objC2D.stroke()
				// bras droite
				objC2D.beginPath()
				objC2D.moveTo(6, -18.5)
				objC2D.lineTo(11, -18.5)
				objC2D.stroke()
				// cou
				objC2D.beginPath()
				objC2D.moveTo(1, -24.5)
				objC2D.lineTo(-7, -24.5)
				objC2D.stroke()
				// epaule gauche
				objC2D.beginPath()
				objC2D.moveTo(-7, -21.5)
				objC2D.lineTo(-12, -21.5)
				objC2D.stroke()
				// bras gauche
				objC2D.beginPath()
				objC2D.moveTo(-10, -18.5)
				objC2D.lineTo(-15, -18.5)
				objC2D.stroke()
				// tete
				objC2D.beginPath()
				objC2D.lineWidth = 8
				objC2D.moveTo(0, -26)
				objC2D.lineTo(0, -32)
				objC2D.stroke()
				// chapeau
				objC2D.beginPath()
				objC2D.strokeStyle = "cyan"
				objC2D.lineWidth = 4
				objC2D.moveTo(0, -32)
				objC2D.lineTo(0, -35)
				objC2D.stroke()

				objC2D.restore()
			}

			function mettreAJourAnimationLoneRunner() {
				if (objLodeRunner.binMovGauche) {
					objLodeRunner.intPosXActuel += objLodeRunner.intVitesse
					objLodeRunner.intScaleX = 1
				} else if (objLodeRunner.binMovDroite) {
					objLodeRunner.intPosXActuel -= objLodeRunner.intVitesse
					objLodeRunner.intScaleX = -1
				}
			}

			const mouvementLoneRunner = () => {
				switch (event.keyCode) {
					case 39:
						objLodeRunner.binMovGauche = true
						objLodeRunner.binMovDroite = false

						break
					case 37:
						objLodeRunner.binMovDroite = true
						objLodeRunner.binMovGauche = false
						break
				}
			}
		</script>
	</head>
	<body onload="initAnimation()">
		<main class="sLargeurDiv sCorps">
			<canvas
				id="monCanvas"
				width="1400"
				height="680"
				tabindex="1"
				onkeydown="mouvementLoneRunner();"
				onkeyup="objLodeRunner.binMovGauche = false; objLodeRunner.binMovDroite = false"
			>
				Votre navigateur ne supporte pas la balise canvas
			</canvas>
		</main>
	</body>
</html>
